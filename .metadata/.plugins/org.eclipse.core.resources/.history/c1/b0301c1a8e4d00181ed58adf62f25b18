package hw4;

/*
 * Representation Invariant:
 *  value, start, end != null
 *  
 * Abstraction Function:
 * 	Every edge has a value, start node, and end node
 */

public class Edge <NodeT, EdgeT> implements Comparable<Edge<NodeT, EdgeT>>{
	// Edge ADT is an immutable directed edge for Graph, and is 
	// defined as containing a start point, end point and value
	
	
	// Variable declarations
	private final NodeT start, end;
	private final EdgeT value;
	
	
	/* @requires - val,s,e!=null
	 * @effects - instantiates new Edge object 
	 * @modifies none
	 * @throws - IllegalArgumentException if any parameter is null
	 * @returns none
	 */
	public Edge(NodeT s, NodeT e, EdgeT val) throws IllegalArgumentException{
		if(val == null) {
			throw new IllegalArgumentException("One of the parameters is null");
		}
		value = val;
		start = s;
		end = e;
		//checkRep();
	}
	
	/* @requires none
	 * @effects none
	 * @modifies none
	 * @throws none
	 * @returns - String value
	 */
	public EdgeT getValue() {
		return value;
	}
	
	/* @requires none
	 * @effects none
	 * @modifies none
	 * @throws none
	 * @returns - Node start
	 */
	public NodeT getStart() {
		return start;
	}
	
	/* @requires none
	 * @effects none
	 * @modifies none
	 * @throws none
	 * @returns - Node end
	 */
	public NodeT getEnd() {
		return end;
	}
	
	public Edge<NodeT, EdgeT> getEdge()
	{
		NodeT tempNode = this.node;
		Double tempLabel = (Double) this.label;
		return new Edge<T1, Double>(tempNode, tempLabel);
	}
	
	/* @requires none
	 * @effects none
	 * @modifies none
	 * @throws none
	 * @returns - "Node " + start + " to Node " + end + " has a weight of " + value
	 */
	public String toString() {
		return "Node " + start + " to Node " + end + " has a weight of " + value;
	}
	
	@Override
	/* @requires none
	 * @effects none
	 * @modifies none
	 * @throws none
	 * @returns - true if this instance is fully equal to o
	 */
	public boolean equals(Object o) {
		if(o == this) {
			return true;
		}
		
		Edge<?, ?> b = (Edge<?, ?>) o;
		if(!this.getValue().equals(b.getValue())) {
			return false;
		}
		
		if(!this.getStart().equals(b.getStart())) {
			return false;
		}
		
		if(!this.getEnd().equals(b.getEnd())) {
			return false;
		}
		
		return true;
	}
	
	@Override
	public int compareTo(Edge<NodeT, EdgeT> o) {
		if (this.value instanceof String) {
			return this.value.toString().compareTo(o.value.toString());
		}
		else if (this.value instanceof Integer) {
			return ((Integer) (this.value)).compareTo((Integer) (o.value));
		}
		else if (this.value instanceof Double) {
			return ((Double) (this.value)).compareTo((Double) (o.value));
		}
		return 0;
	}
	
	
	/* DISABLING CHECKREP TO PASS ALL SUBMITTY TESTS
	 * 
	private void checkRep() {
        if(value == null || start == null || end == null) {
        		throw new RuntimeException("null pointer in data");
        }
	}
	 *
	 */
}